// git仓库 :

// 本地仓库 : 一个有.git文件夹的目录,git会收集.git所在目录的所有变更,包含文件的修改,删除,新增和替换;

// 远程仓库 : 在远程服务器上的git仓库,常见的项目托管有github,coding , coding用起来和github一样,但是coding部署在国内速度非常快,公司自己搭建的gitlab 

// 把远程仓库克隆到本地git clone 仓库地址 
// 1. 找到你想行这个仓库的目录,右键 git bash here 
// 2. 执行 git clone 仓库地址(shift+insert 粘贴快捷键)

// git config --list 参看当前仓库的配置信息
// git remote -v 查看当前的本地仓库和哪个远程仓库是连接的 
// origin  https://github.com/caicai1234567890/test1.git (fetch)
// origin  https://github.com/caicai1234567890/test1.git (push)

// git 的三个区 :
// 工作区 暂存区 历史区
// 暂存区和历史区是在版本库中的,工作区不在

// 工作区: 就是当前的仓库目录,可以在这里做任何的修改
// 暂存区: 准备成为版本的修改,可以随时修改
// 历史区 : 已经成为版本的修改,只有放到历史区才能成为版本

// 创建一个版本
// touch 文件名.拓展名 
// vim 文件名 编辑文件
//  i(插入,可以向文件中插入)
// esc (表示退出编辑状态)
// :w 保存
// :q 退出
// :wq 保存并退出
// :q! 强制退出

// 1.首先在本地的git仓库中修改一些东西
// 2. git status 在操作git的时候查看本地仓库的状态 
// 如果文件为红色,表示这些文件处于工作区

// 3. 把工作区中文件添加到暂存区 
// git add. 或者 git add 文件名(当你的仓库中有的需要提交有的不需要提交的时候就使用文件名一个个的提交)
// 4. 添加到暂存区之后,git status检查仓库状态;git status , 如果文件变绿了这表示文件已经被添加到暂存区了

// 5. 如果添加完之后后悔了,就执行git rm --cached 文件名 ,把已经添加到暂存区的文件删除掉
//  cat 1.txt 查看文件中的信息

// 6. 暂存区的文件覆盖工作区中的文件 git checkout 文件名, 这种撤销手段要求暂存区有这个文件
//  7. 把暂存区的修改添加到历史区
// git commit -m'本次提交的描述' [执行过commite之后修改就成了一个版本了]
// commit之后会形成一个版本,每个版本都有一个id(也叫版本号)

// 8. 把本地的版本库同步到远程仓库,先pull再push 
// git pull origin master
// git push origin master

// push 之后在github上的commits里面查看提交记录

// git diff 比较这次修改改了哪些东西 

// 回退到某个版本
// 1.查看版本库中的历史提交记录 ,版本库的记录中有每次提交的版本号以及对应的注释内容,通过版本号,可以回退到任何版本.
// 2. git log 查看所有的版本记录及提交记录 
// 3. 从提交记录中找到要回滚的版本号
// git reset --hard 版本号 

//  4.回滚后,要push到远程仓库,远程仓库中的内容才会跟着回滚
// 回滚后push需要强推
// git push origin master -f [-f表示强推]

// 不要轻易回滚 ,如果上线有bug,如果不严重(不影响用户使用,不严重紧急修复再上线,然后生成新版本)

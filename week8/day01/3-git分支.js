// mster分支 
// 再远程仓库创立之初会默认创建一个master分支,这个分支叫做主干,主干分支上保存的是线上运行的代码,着些代码都是经过测试没有问题的代码.

// 一般都是基于master的开发分支: 
// 真实的项目中,我们一般不是在master分支上开发而是基于master新开一个开发分支,每个分支都有自己的版本库,记录发生在当前分支上的变更

// 我们新开的分支,一般都是基于master开分支,新开的分支相当于master在开分支的那一刻master的一个快照,(master里面的代码长什么样,分支里面的代码就什么样),接下来所有的开发都是在开发分支上完成的 . 写在分支上的东西如果不合并到master上,master上是不会有. 

// 合并分支 : 
// 当开发完成后要把分支里面的代码合并到master ,因为线上跑的都是master的代码,我们在分支上开发的代码master是没有的,但是在分支合并到master之前,需要先把master上的代码同步到分支上,然后再把分支合并到master上 


// 创建一个分支:(创建分支前先同步master代码)
// git checkout -b 分支名 [创建新分支并且切换到新分支]
// 或者 git branch 分支名 [新建分支但是不会帮你切换到分支]
// git branch -v 查看当前所有的分支,前面有※号的代表当前所处的分支

// 切换分支:
// git checkout 分支名 从当前分支切换至某个分支

// 删除分支:
// git branch -D

// 合并分支 
// git merge 分支名 把指定的分支合并到当前的分支

// 分支开发流程: 
/* 
1. 克隆远程仓库到本地:git clone + 仓库地址
2. 在远程新建一个分支
3. 在本地仓库新建一个和远程仓库同名的分支  git checkout -b feature_0715
4. 同步本地分支和远程分支 git pull origin 分支名
5. 在本地开发(在目录中新建,修改文件)
6. 适时的add commit,并且push到远程的分支;
git push origin 分支名
[如果多人协作的话,在push到远程分支之前先pull远程分支],在pull分支的时候有可能会引发冲突,如果多人同时修改了同一个文件就会冲突,冲突后就要解决冲突,谁发现冲突谁解决,解决冲突就是确定哪些代码要哪些不要,解决冲突之后需要重新commit到历史区然后再push到远程分支
7. 重复第六步直到功能直到开发完成


分支提测(把开发完成后把项目交给测试的同事去测试) : 
1. 开发结束后我们都是用分支提测
2. 一般QA会要求咱门同步master的代码(合一下master再提测,把master的代码合并到分支上)
2.1 切换到master分支
2.2 pull master ,让本地的master里面的代码和远程master同步
2.3 切换到开发分支
2.4 执行合并 git merge master --no-ff [把master合并到当前分支上]
2.5 合并到master之后如果有冲突需要解决冲突,解决完冲突再commit 然后push到远程分支
2.6 用开发分支提测就可以了,如果没有提测文档,需要把分支名发给QA同事
2.7 如果QA再测试的过程中发现了bug,直接在分支上改就可以了,然后add,commit然后push到远程分支上.

!!!所有的push之前都要pull 

上线发版: 
1. 上线之前还需要再次同步master的代码到分支 
2. 把分支合并到master,但是一般情况下,都是提交merge request(MR),github上叫做pull request
3. 找有权限合代码的人帮你合并MR
4. 合完代码之后去找上线的人上线.一般都是运维的同事负责上线

[多人协作]
1. 如果是github,把项目成员添加到settings -> collaborators -> add collaborators,然后再邀请,被邀请的人同意后才会加入到这个项目中
2.gitlab 你的老大会给你开账号,把你加到项目中.






*/
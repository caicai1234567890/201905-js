// git : 分布式版本管理工具,在中央服务器上有一个版本库,但是在每个项目成员本地都有一份版本库;

// svn : 集中式版本管理工具,在中央服务器上有一套版本库,在项目成员的本地没有版本库

// git的三个区 : 工作区,暂存区,历史区
// 暂存区和历史区都在版本库中,但是只有历史区的才算版本 

// 创建一个版本: 
// 1. 版本用来记录修改,只有先修改本地仓库中的文件才有可能生成版本
// 2. git status 查看当前仓库的状态,如果文件为红色,说明文件处于工作区,如果为绿色说明在暂存区

// 每个分支都有自己的独立的版本库,如果在某个分支上修改要保留在当前分支上就需要把这个修改添加到当前分支的版本库(git add .  -> git commite -m),如果不添加到分支的版本库,切换分支的时候就会带到其他的分支.

// 3. git add . 或者 git add 文件名 把变更添加到暂存区
// 4. git status 此时的文件颜色应该是绿色的
// 5. git commit -m''
// 经过上面的操作只是把修改添加到了本地的版本库,还需要同步到远程仓库,在同步本地仓库和远程仓库的时候(push),只同步当前的版本(只同步历史区新产生的版本)

// 6. 先pull : git pull origin 分支名
// 7. 再push : git push origin 分支名

// git分支 
// master:创建远程仓库的时候默认新建的分支,master中存放的都是在线上运行的代码
// 开发的时候都是基于开一个新分支用于开发,不能直接在master上开发

// 分支: 
// 新建分支  
// 1.git checout -b 分支名(新建并切换到新分支)
// 2. git branch 分支名(只新建分支但是不会切换)

// 查看当前所在分支
// git branch -v (带*的是当前所在的分支)

// 切换分支 (切换到指定分支名的分支)
// git checkout 分支名
// git checkout - : 切换到上一次的分支

// 删除分支:
// git branch -D 分支名 

// 合并分支（把当前的文件合并到当前分支上）
// git merge 分支名(把指定的合并分支到当前的分支)

// 回滚： 要搞清楚回滚到哪个版本号
// 1. 通过git log找到要回滚到的版本号
// 2. git reset --hard 版本号
